from project import input_argument
import pre_processing
import processing
import post_processing
import pytest
import numpy as np

def main():

    #Test implemented functions
    test_input()
    test_pre_processing()
    test_processing()
    test_post_processing()


def test_input():
    assert input_argument([]) == ["input.txt", "output.txt"]
    with pytest.raises(SystemExit) as excinfo:
        input_argument(["project.py", "-i"])
    assert str(excinfo.value) == "Missing arguments!"
    with pytest.raises(SystemExit) as excinfo:
        input_argument(["project.py", "-i", "input.txt", "-o"])
    assert str(excinfo.value) == "Missing arguments!"
    with pytest.raises(SystemExit) as excinfo:
        input_argument(["project.py", "-i", "input.txt", "-i", "output.txt"])
    assert str(excinfo.value) == "Repeated arguments!"
    with pytest.raises(SystemExit) as excinfo:
        input_argument(["project.py", "-i", "input.txt", "-o", "input.txt"])
    assert str(excinfo.value) == "Repeated arguments!"
    with pytest.raises(SystemExit) as excinfo:
        input_argument(["project.py", "-p", "input.txt", "-o", "output.txt"])
    assert str(excinfo.value) == "Invalid arguments!"
    with pytest.raises(SystemExit) as excinfo:
        input_argument(["project.py", "-p", "input.csv", "-o", "output.txt"])
    assert str(excinfo.value) == "Invalid arguments!"
    with pytest.raises(SystemExit) as excinfo:
        input_argument(["project.py", "-p", "input.txt", "-o", "output.csv"])
    assert str(excinfo.value) == "Invalid arguments!"

#Test Pre_Processing functions
def test_pre_processing():

    boundaries = [1, 2, 3, 4]
    a = 0.5
    b = 1
    n_x = 3
    n_y = 3
    n_p = n_y * n_x
    n_e = (n_y - 1) * (n_x - 1)
    d_x = a / (n_x - 1)
    d_y = b / (n_y - 1)

    Mtp = np.array([[1, 1, 2, 1, 1, 4],
                    [2, 1, 1, 1, 0, 1],
                    [3, 1, 2, 1, 2, 2],
                    [1, 2, 1, 4, 0, 4],
                    [2, 2, 0, 0, 0, 0],
                    [3, 2, 1, 2, 0, 2],
                    [1, 3, 2, 3, 4, 3],
                    [2, 3, 1, 3, 0, 3],
                    [3, 3, 2, 2, 3, 3]])

    M_l = np.array([[4, 1, 0, 3], [5, 2, 1, 4], [7, 4, 3, 6], [8, 5, 4, 7]])

    V_r_l = np.array([0,0,1,0,0,0,1,1,0,0,0,1,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1])

    M_rr = np.array([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0.25, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0.5, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0.25, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0.5, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0.25, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.5, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.25]])

    k1 = np.array([[240, 0, -120, 120, 0, -60, -120, 0, -60, -240, 0, -120],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [-120, 0, 80, -60, 0, 40, 60, 0, 20, 120, 0, 40],
                   [120, 0, -60, 240, 0, -120, -240, 0, -120, -120, 0, -60],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [-60, 0, 40, -120, 0, 80, 120, 0, 40, 60, 0, 20],
                   [-120, 0, 60, -240, 0, 120, 240, 0, 120, 120, 0, 60],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [-60, 0, 20, -120, 0, 40, 120, 0, 80, 60, 0, 40],
                   [-240, 0, 120, -120, 0, 60, 120, 0, 60, 240, 0, 120],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [-120, 0, 40, -60, 0, 20, 60, 0, 40, 120, 0, 80]])

    k2 = np.array([[15, -7.5, 0, -15, -7.5, 0, -7.5, -3.75, 0, 7.5, -3.75, 0],
                   [7.5, -5, 0, -7.5, -2.5, 0, -3.75, -1.25, 0, 3.75, -2.5, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [-15, 7.5, 0, 15, 7.5, 0, 7.5, 3.75, 0, -7.5, 3.75, 0],
                   [7.5, -2.5, 0, -7.5, -5, 0, -3.75, -2.5, 0, 3.75, -1.25, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [-7.5, 3.75, 0, 7.5, 3.75, 0, 15, 7.5, 0, -15, 7.5, 0],
                   [3.75, -1.25, 0, -3.75, -2.5, 0, -7.5, -5, 0, 7.5, -2.5, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [7.5, -3.75, 0, -7.5, -3.75, 0, -15, -7.5, 0, 15, -7.5, 0],
                   [3.75, -2.5, 0, -3.75, -1.25, 0, -7.5, -2.5, 0, 7.5, -5, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])

    k3 = np.array([[30, -15, -15, -30, 0, 15, 30, 0, 0, -30, 15, 0],
                   [15, 0, -15, 0, 0, 0, 0, 0, 0, -15, 0, 0],
                   [-15, 15, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0],
                   [-30, 0, 15, 30, 15, -15, -30, -15, 0, 30, 0, 0],
                   [0, 0, 0, -15, 0, 15, 15, 0, 0, 0, 0, 0],
                   [15, 0, 0, -15, -15, 0, 0, 0, 0, 0, 0, 0],
                   [30, 0, 0, -30, -15, 0, 30, 15, 15, -30, 0, -15],
                   [0, 0, 0, 15, 0, 0, -15, 0, -15, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 15, 15, 0, -15, 0, 0],
                   [-30, 15, 0, 30, 0, 0, -30, 0, -15, 30, -15, 15],
                   [-15, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 15],
                   [0, 0, 0, 0, 0, 0, -15, 0, 0, 15, -15, 0]])

    k4 = np.array([[84, -6, -6, -84, -6, 6, 84, 6, 6, -84, 6, -6],
                   [6, -8, 0, -6, 2, 0, 6, -2, 0, -6, 8, 0],
                   [-6, 0, 8, 6, 0, -8, -6, 0, 2, 6, 0, -2],
                   [-84, 6, 6, 84, 6, -6, -84, -6, -6, 84, -6, 6],
                   [6, 2, 0, -6, -8, 0, 6, 8, 0, -6, -2, 0],
                   [6, 0, -8, -6, 0, 8, 6, 0, -2, -6, 0, 2],
                   [84, -6, -6, -84, -6, 6, 84, 6, 6, -84, 6, -6],
                   [-6, -2, 0, 6, 8, 0, -6, -8, 0, 6, 2, 0],
                   [6, 0, 2, -6, 0, -2, 6, 0, 8, -6, 0, -8],
                   [-84, 6, 6, 84, 6, -6, -84, -6, -6, 84, -6, 6],
                   [-6, 8, 0, 6, -2, 0, -6, 2, 0, 6, -8, 0],
                   [-6, 0, -2, 6, 0, 2, -6, 0, -8, 6, 0, 8]])

    assert np.all(pre_processing.type_point(boundaries, n_x, n_y, n_p) == Mtp)
    assert np.all(pre_processing.location(n_e, n_x, n_y) == M_l)
    assert np.all(pre_processing.nodal_reduction(boundaries, n_p, Mtp) == V_r_l)
    assert np.all(pre_processing.RR_matrix(d_x, d_y) == M_rr)
    k1_i, k2_i, k3_i, k4_i = pre_processing.read_kk_coefficients(d_x, d_y)
    assert np.all(k1 == k1_i)
    assert np.all(k2 == k2_i)
    assert np.all(k3 == k3_i)
    assert np.all(k4 == k4_i)


#Test Processing functions
def test_processing():

    boundaries = [1, 2, 3, 4]
    a = 0.5
    b = 1
    t = 0.005
    E = 70000
    v = 0.33
    n_x = 3
    n_y = 3
    n_p = n_y * n_x
    n_e = (n_y - 1) * (n_x - 1)
    d_x = a / (n_x - 1)
    d_y = b / (n_y - 1)
    c = a
    d = b
    x_c = a/2
    y_c = b/2
    p_0 = 100

    Mtp = pre_processing.type_point(boundaries, n_x, n_y, n_p)
    M_l = pre_processing.location(n_e, n_x, n_y)
    V_r_l = pre_processing.nodal_reduction(boundaries, n_p, Mtp)
    M_rr = pre_processing.RR_matrix(d_x, d_y)
    k1, k2, k3, k4 = pre_processing.read_kk_coefficients(d_x, d_y)

    k_e = np.array([[ 1.27886881382560910E+05, -3.15527625032731157E+03, -1.38517936632626370E+04,  2.92223095051060591E+04,
                     -2.07515056297460114E+03, -5.78685519769573330E+03, -3.90416339355852469E+04, -3.79680544645195198E+02,
                     -6.32691804137208874E+03, -1.18067556952081737E+05,  7.00445142707515174E+02, -1.33117308195862825E+04],
                    [ 3.15527625032731157E+03, -8.37915684734223760E+02, -2.70031421838177607E+02, -2.07515056297460114E+03,
                     -1.99659596753076784E+02,  0.00000000000000000E+00, -3.79680544645195198E+02, -2.09478921183555940E+02,
                      0.00000000000000000E+00, -7.00445142707515174E+02,  1.96386488609583409E+01,  0.00000000000000000E+00],
                    [-1.38517936632626370E+04,  2.70031421838177607E+02,  2.25517151086671947E+03, -5.78685519769573330E+03,
                      0.00000000000000000E+00,  1.01793663262634220E+03,  6.32691804137208874E+03,  0.00000000000000000E+00,
                      5.63792877716679868E+02,  1.33117308195862825E+04,  0.00000000000000000E+00,  1.07276119402985091E+03],
                    [ 2.92223095051060591E+04,  2.07515056297460114E+03, -5.78685519769573330E+03,  1.27886881382560910E+05,
                      3.15527625032731157E+03, -1.38517936632626370E+04, -1.18067556952081737E+05, -7.00445142707515174E+02,
                     -1.33117308195862825E+04, -3.90416339355852469E+04,  3.79680544645195198E+02, -6.32691804137208874E+03],
                    [ 2.07515056297460114E+03, -1.99659596753076784E+02,  0.00000000000000000E+00, -3.15527625032731157E+03,
                     -8.37915684734223760E+02,  2.70031421838177607E+02,  7.00445142707515174E+02,  1.96386488609583409E+01,
                      0.00000000000000000E+00,  3.79680544645195198E+02, -2.09478921183555940E+02,  0.00000000000000000E+00],
                    [-5.78685519769573330E+03,  0.00000000000000000E+00,  1.01793663262634220E+03, -1.38517936632626370E+04,
                     -2.70031421838177607E+02,  2.25517151086671947E+03,  1.33117308195862825E+04,  0.00000000000000000E+00,
                      1.07276119402985091E+03,  6.32691804137208874E+03,  0.00000000000000000E+00,  5.63792877716679868E+02],
                    [-3.90416339355852469E+04,  3.79680544645195198E+02,  6.32691804137208874E+03, -1.18067556952081737E+05,
                     -7.00445142707515174E+02,  1.33117308195862825E+04,  1.27886881382560910E+05,  3.15527625032731157E+03,
                      1.38517936632626370E+04,  2.92223095051060591E+04,  2.07515056297460114E+03,  5.78685519769573330E+03],
                    [ 3.79680544645195198E+02, -2.09478921183555940E+02,  0.00000000000000000E+00,  7.00445142707515174E+02,
                      1.96386488609583409E+01,  0.00000000000000000E+00, -3.15527625032731157E+03, -8.37915684734223760E+02,
                     -2.70031421838177607E+02,  2.07515056297460114E+03, -1.99659596753076784E+02,  0.00000000000000000E+00],
                    [-6.32691804137208874E+03,  0.00000000000000000E+00,  5.63792877716679868E+02, -1.33117308195862825E+04,
                      0.00000000000000000E+00,  1.07276119402985091E+03,  1.38517936632626370E+04,  2.70031421838177607E+02,
                      2.25517151086671947E+03,  5.78685519769573330E+03,  0.00000000000000000E+00,  1.01793663262634220E+03],
                    [-1.18067556952081737E+05,  7.00445142707515174E+02,  1.33117308195862825E+04, -3.90416339355852469E+04,
                     -3.79680544645195198E+02,  6.32691804137208874E+03,  2.92223095051060591E+04, -2.07515056297460114E+03,
                      5.78685519769573330E+03,  1.27886881382560910E+05, -3.15527625032731157E+03,  1.38517936632626370E+04],
                    [-7.00445142707515174E+02,  1.96386488609583409E+01,  0.00000000000000000E+00, -3.79680544645195198E+02,
                     -2.09478921183555940E+02,  0.00000000000000000E+00, -2.07515056297460114E+03, -1.99659596753076784E+02,
                      0.00000000000000000E+00,  3.15527625032731157E+03, -8.37915684734223760E+02,  2.70031421838177607E+02],
                    [-1.33117308195862825E+04,  0.00000000000000000E+00,  1.07276119402985091E+03, -6.32691804137208874E+03,
                      0.00000000000000000E+00,  5.63792877716679868E+02,  5.78685519769573330E+03,  0.00000000000000000E+00,
                      1.01793663262634220E+03,  1.38517936632626370E+04, -2.70031421838177607E+02,  2.25517151086671947E+03]])

    Q_e_1_i = np.array([[3.125, 3.125, 3.125, 3.125],
                        [3.125, 3.125, 3.125, 3.125],
                        [3.125, 3.125, 3.125, 3.125],
                        [3.125, 3.125, 3.125, 3.125]])

    Q_e_2_i = np.array([[0, 0, 0, 0],
                        [0, 0, 0, 0],
                        [0, 0, 0, 0],
                        [0, 0, 0, 0]])

    Q_e_3_i = np.array([[0, 0, 0, 0],
                        [0, 0, 0, 0],
                        [0, 0, 0, 0],
                        [0, 0, 0, 0]])

    Q_g = np.array([3.125, 0, 0, 6.25, 0, 0, 3.125, 0, 0, 6.25, 0, 0, 12.5, 0, 0, 6.25, 0, 0, 3.125, 0, 0, 6.25, 0, 0, 3.125, 0, 0])

    Q_r = np.array([3.125, 0, 6.25, 0, 0, 0, 6.25, 0, 12.5, 0, 0, 0])

    delta_g = np.array([ 1.43033547644783520E-03, -1.95581585437640433E-03,  0.00000000000000000E+00,  1.01684831138058808E-03,
                        -1.39432113388430362E-03, -3.15403929782544614E-03,  0.00000000000000000E+00,  0.00000000000000000E+00,
                        -4.51156389536538655E-03,  6.92247024112021083E-04, -1.62122568094186931E-03,  0.00000000000000000E+00,
                         4.94995093450344820E-04, -1.15181434497642864E-03, -1.52699341608253489E-03,  0.00000000000000000E+00,
                         0.00000000000000000E+00, -2.20938610397141636E-03,  0.00000000000000000E+00,  0.00000000000000000E+00,
                         0.00000000000000000E+00,  0.00000000000000000E+00,  0.00000000000000000E+00,  0.00000000000000000E+00,
                         0.00000000000000000E+00,  0.00000000000000000E+00,  0.00000000000000000E+00])

    assert np.all(processing.stiffness_matrix_element(k1, k2, k3, k4, M_rr, v, E, t, d_x, d_y) == k_e)
    K_g = processing.stiffness_matrix_plate(n_p, n_e, M_l, k_e)
    Q_e_1, Q_e_2, Q_e_3 = processing.nodal_force_element(c, d, x_c, y_c, d_x, d_y, p_0, n_e, Mtp, M_l)
    assert np.all(Q_e_1_i == Q_e_1)
    assert np.all(Q_e_2_i == Q_e_2)
    assert np.all(Q_e_3_i == Q_e_3)
    assert np.all(processing.nodal_force_plate(n_e, n_p, M_l, Q_e_1, Q_e_2, Q_e_3) == Q_g)
    Q_r_i, K_r = processing.reduce_matrix_vector(V_r_l, Q_g, K_g)
    assert np.all(Q_r_i == Q_r)
    assert np.all(processing.global_deslocation_vector(n_p, Q_r, K_r, V_r_l) == delta_g)


#Test Post Processing functions
def test_post_processing():

    a = 0.5
    b = 1
    t = 0.005
    E = 70000
    v = 0.33
    n_x = 3
    n_y = 3
    n_p = n_y * n_x
    n_e = (n_y - 1) * (n_x - 1)
    d_x = a / (n_x - 1)
    d_y = b / (n_y - 1)

    M_da = np.array([[7.85545954438334656E+10, 2.59230164964650459E+10, 0.00000000000000000E+00],
                     [2.59230164964650459E+10, 7.85545954438334656E+10, 0.00000000000000000E+00],
                     [0.00000000000000000E+00, 0.00000000000000000E+00, 2.63157894736842079E+10]])

    M_dd = np.array([[8.18277035873265390E+02, 2.70031421838177607E+02, 0.00000000000000000E+00],
                     [2.70031421838177607E+02, 8.18277035873265390E+02, 0.00000000000000000E+00],
                     [0.00000000000000000E+00, 0.00000000000000000E+00, 2.74122807017543892E+02]])

    D_q = 8.18277035873265390E+02

    M_cc_i = np.array([[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
                       [-0, -0, -0, 48, -0, -4, -48, -0, -8, -0, -0, -0],
                       [-8, -0, -0, 8, 4, -0, -8, -4, -2, 8, -0, 2],
                       [-0, -0, -0, -0, -0, -0, -12, -4, -0, 12, -2, -0],
                       [0, 0, 0, -128, 0, 16, 128, 0, 16, 0, 0, 0],
                       [96, -0, -8, -96, -0, 8, 96, -0, 16, -96, -0, -16],
                       [48, -8, -0, -48, -16, -0, 48, 16, -0, -48, 8, -0],
                       [-0, -0, -0, -0, -0, -0, 16, 4, -0, -16, 4, -0],
                       [-256, 0, 32, 256, 0, -32, -256, 0, -32, 256, 0, 32],
                       [-64, 16, 0, 64, 16, 0, -64, -16, 0, 64, -16, 0]])

    M_hh = np.array([[0, 0, 0, -2, 0, 0, -1.5, 0, 0, 0, -0, 0],
                     [0, 0, 0, 0, 0, -2, 0, 0, -0.5, 0, 0, -0],
                     [0, 0, 0, 0, -2, 0, 0, -1, 0, 0, -0.375, 0]])

    M_aa = np.array([[0, 0, 0, 0, 0, 0, -6, 0, -2, 0, 0, 0],
                     [0, 0, 0, 0, 0, 0, 0, -2, 0, -6, -1.5, -1.5]])

    M_da_i, M_dd_i, D_q_i = post_processing.elasticity_matrix(t, E, v)
    assert np.all(M_da_i == M_da)
    assert np.all(M_dd_i == M_dd)
    assert np.all(D_q_i == D_q)
    assert np.all(post_processing.inv_CC_matrix(d_x, d_y) == M_cc_i)
    assert np.all(post_processing.HH_matrix(d_x, d_y, 1) == M_hh)
    assert np.all(post_processing.AA_matrix(d_x, d_y, 1) == M_aa)


if __name__ == "__main__":
    main()
